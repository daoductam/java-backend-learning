import java.util.HashMap;
import java.util.Map;

public class Q389_Find_the_difference {
    /*
    You are given two strings s and t.
    String t is generated by random shuffling string s and then
     add one more letter at a random position.

    Return the letter that was added to t.
    Example 1:
    Input: s = "abcd", t = "abcde"
    Output: "e"
    Explanation: 'e' is the letter that was added.
    Example 2:
    Input: s = "", t = "y"
    Output: "y"

     */
    public static void main(String[] args) {

    }
    /*
    Ý tưởng: HashMap Time O(n) Space O(n)
        Đếm tần suất từng ký tự trong chuỗi s bằng HashMap
        Duyệt chuỗi t:
            Nếu ký tự có trong map → giảm tần suất
            Nếu không có → chính là ký tự được thêm vào → trả về
        Nếu còn lại gì thì trả ' ' (trường hợp không xảy ra trong đề)


     */
    public static char findTheDifference(String s, String t) {
        Map<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            char key = s.charAt(i);
            if (map.containsKey(key)) {
                map.put(key,map.get(key)+1);
            } else {
                map.put(key, 1);
            }
        }

        for (Character c : t.toCharArray()) {
            if (map.containsKey(c)) {
                map.put(c,map.get(c)-1);
                if(map.get(c) < 1) {
                    map.remove(c);
                }
            } else {
                return c;
            }
        }
        return ' ';
    }
    /*
    Đáp án 1 Sử dụng tổng ASCII Time O(n) Space O(1)
    Mỗi ký tự có mã ASCII riêng.
    Chuỗi t là s + 1 ký tự → tổng ASCII của t - s = ký tự bị thêm.
     */

//    public static findTheDifference(String s, String t) {
//        int s_sum = 0;
//        int t_sum =0;
//        for (int i = 0; i < s.length(); i++) {
//            s_sum += (int) s.charAt(i);
//        }
//        for (int i = 0; i < t.length(); i++) {
//            t_sum += (int) t.charAt(i);
//        }
//
//        int result = t_sum - s_sum;
//        return (char) result;
//    }

    /*
    Đáp án 2 Dùng XOR Time O(n) Space O(1)
    XOR (^) của 2 ký tự giống nhau sẽ là 0.
    Khi XOR hết s và t, chỉ còn ký tự bị thêm.
     */
//    public char findTheDifference(String s, String t) {
//        int result = 0;
//
//        for (char ch : s.toCharArray()) {
//            result ^= ch;
//        }
//        for (char ch : t.toCharArray()) {
//            result ^= ch;
//        }
//
//        return (char) result;
//    }
}
