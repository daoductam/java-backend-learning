plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'jacoco'
}

group = 'com.tamdao'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'

	testImplementation 'com.h2database:h2'
	// https://mvnrepository.com/artifact/io.rest-assured/rest-assured
	testImplementation("io.rest-assured:rest-assured:5.5.0")
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}
jacoco {
	toolVersion = "0.8.10" // hoặc bản mới hơn nếu cần
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // ✅ sau khi test xong thì tạo report

	// Optional: Đặt điều kiện cho coverage nếu muốn fail build nếu thấp
	// finalizedBy jacocoTestCoverageVerification
}

jacocoTestReport {
	dependsOn test // ✅ chạy report sau khi test
	reports {
		xml.required.set(true)
		html.required.set(true)
		csv.required.set(false)
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.80 // 80% coverage
			}
		}
	}
}
